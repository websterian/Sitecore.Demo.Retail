//-----------------------------------------------------------------------
// <copyright file="Startup.cs" company="Sitecore Corporation">
//     Copyright (c) Sitecore Corporation 1999-2016
// </copyright>
// <summary>Defines the Owin Startup class.</summary>
//-----------------------------------------------------------------------
// Copyright 2015 Sitecore Corporation A/S
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
// except in compliance with the License. You may obtain a copy of the License at
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the 
// License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
// either express or implied. See the License for the specific language governing permissions 
// and limitations under the License.
// -------------------------------------------------------------------------------------------

using Microsoft.Owin;

[assembly: OwinStartup(typeof(Sitecore.Foundation.Commerce.Startup))]

namespace Sitecore.Foundation.Commerce
{
    using Microsoft.Owin;
    using Microsoft.Owin.Security;
    using Microsoft.Owin.Security.Cookies;
    using Microsoft.Owin.Security.OpenIdConnect;
    using Owin;
    using Configuration;
    using System;
    using System.Threading.Tasks;
    using Util;

    /// <summary>
    /// Entry point for OWIN.
    /// </summary>  
    public class Startup
    {
        /// <summary>
        /// Configures the authentication.
        /// </summary>
        /// <param name="app">The application.</param>
        public void Configuration(IAppBuilder app)
        {
            app.UseCookieAuthentication(new CookieAuthenticationOptions
            {
                AuthenticationType = OpenIdConnectUtilities.ApplicationCookieAuthenticationType,
                LoginPath = new PathString("/Login"),
                CookieSecure = CookieSecureOption.Always
            });

            app.SetDefaultSignInAsAuthenticationType(CookieAuthenticationDefaults.AuthenticationType);

            // Loading Retail Configuration to access available Identity Providers.
            RetailConfiguration retailConfiguration = (RetailConfiguration)OpenIdConnectUtilities.DynamicsConnectorConfiguration.GetSection(OpenIdConnectUtilities.ConfigurationSectionName);
            if (retailConfiguration == null)
            {
                return;
            }

            try
            {
                // Enumerating all available Identity Providers and creating a middleware for each of the provider.
                foreach (IdentityProviderClientConfigurationElement provider in retailConfiguration.IdentityProviders)
                {
                    if (provider.ProviderType == IdentityProviderType.OpenIdConnect)
                    {
                        OpenIdConnectAuthenticationOptions options = GetOpenIdConnectAuthenticationOptions(provider);
                        app.UseOpenIdConnectAuthentication(options);
                    }
                }
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error(ex.Message, ex, this);
            }
        }

        private static OpenIdConnectAuthenticationOptions GetOpenIdConnectAuthenticationOptions(IdentityProviderClientConfigurationElement provider)
        {
            OpenIdConnectAuthenticationOptions options = new OpenIdConnectAuthenticationOptions
            {
                AuthenticationType = provider.Name,
                Caption = provider.Name,
                ClientId = provider.ClientId,
                Authority = provider.Issuer.ToString(),
                RedirectUri = provider.RedirectUrl.ToString(),                
                // Leveraging Authorization Code grant
                ResponseType = "code",
                Scope = "openid email",
                Notifications = GetOpenIdConnectAuthenticationNotifications()
            };

            return options;
        }

        /// <summary>
        /// Gets the open identifier connect authentication notifications.
        /// </summary>
        /// <returns>The open identifier authentication notifications.</returns>
        private static OpenIdConnectAuthenticationNotifications GetOpenIdConnectAuthenticationNotifications()
        {
            return new OpenIdConnectAuthenticationNotifications
            {
                RedirectToIdentityProvider = (context) =>
                {
                    // Trimming an autogenerated (by Katana) Nonce to avoid encrypted id_token length to exceed 4K (the maximum value could be stored in a cookie) 
                    // because the token is stored in Forms Auth cookie.
                    // If other approaches are used to store the token then consider removing the line below which trims the Nonce.
                    context.ProtocolMessage.Nonce = context.ProtocolMessage.Nonce.Substring(0, 20);

                    // By default Katana uses form_post mode which is currently supported by very few providers, such as AAD
                    // so, overwriting the default value with "query" which is supported by a bigger amount of providers
                    context.ProtocolMessage.ResponseMode = "query";

                    CookieOptions shortLivingCookieOptions = new CookieOptions { Expires = DateTime.UtcNow.AddMinutes(30), HttpOnly = true, Secure = true };
                    context.OwinContext.Response.Cookies.Append(OpenIdConnectUtilities.CookieState, context.ProtocolMessage.State, shortLivingCookieOptions);
                    context.OwinContext.Response.Cookies.Append(OpenIdConnectUtilities.CookieNonce, context.ProtocolMessage.Nonce, shortLivingCookieOptions);

                    // Storing currently used Provider in a longer living cookie because the provider is needed at LogOut time.
                    CookieOptions longLivingCookieOptions = new CookieOptions { Expires = DateTime.MaxValue, HttpOnly = true, Secure = true };
                    context.OwinContext.Response.Cookies.Append(OpenIdConnectUtilities.CookieCurrentProvider, context.Options.AuthenticationType, longLivingCookieOptions);

                    return Task.FromResult(0);
                }
            };
        }
    }
}
